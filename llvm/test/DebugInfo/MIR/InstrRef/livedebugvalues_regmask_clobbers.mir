# RUN: llc %s -march=x86-64 -run-pass=livedebugvalues -experimental-debug-variable-locations -o - 2>&1 | FileCheck %s
#
# We sometimes need to insert new register defs in blocks where regmask clobbers
# occur, but we weren't tracking them at the time. This is a necessary
# performance hack: if we track all ~300 X86 registers when we're only using
# ten of them, we would be very slow.
#
# In the MIR below, we have some register copies to preserve rdi. It makes rdi
# live-through, but in the other block rdi should be regmask-clobbered. Test
# that we get it right.
--- |
  define i8 @test(i32 %bar) local_unnamed_addr !dbg !7 {
  entry:
    ret i8 0, !dbg !12
  }

  declare dso_local void @ext(i64)

  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!3, !4, !5, !6}
  !0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, producer: "", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
  !1 = !DIFile(filename: "foo.cpp", directory: ".")
  !2 = !DIBasicType(name: "int", size: 8, encoding: DW_ATE_signed)
  !3 = !{i32 2, !"Dwarf Version", i32 4}
  !4 = !{i32 2, !"Debug Info Version", i32 3}
  !5 = !{i32 1, !"wchar_size", i32 2}
  !6 = !{i32 7, !"PIC Level", i32 2}
  !7 = distinct !DISubprogram(name: "foo", linkageName: "foo", scope: !1, file: !1, line: 6, type: !8, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !10)
  !8 = !DISubroutineType(types: !9)
  !9 = !{!2, !2}
  !10 = !{!11}
  !11 = !DILocalVariable(name: "baz", scope: !7, file: !1, line: 7, type: !2)
  !12 = !DILocation(line: 10, scope: !7)
...
---
name: test
liveins:
  - { reg: '$rdi', virtual-reg: '' }
stack:
  - { id: 0, name: '', type: spill-slot, offset: -16, size: 8, alignment: 8,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
body:  |
  bb.0:
    DBG_PHI $rdi, 1
    JCC_1 %bb.1, 4, implicit $eflags
    JMP_1 %bb.2

  ; CHECK-LABEL: bb.1:
  bb.1:
    CALL64pcrel32 @ext, csr_64, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !12

    ; rdi should have been clobbered by the call: no location.
    DBG_INSTR_REF 1, 0, !11, !DIExpression(), debug-location !12
    ; CHECK:      DBG_INSTR_REF
    ; CHECK-NEXT: DBG_VALUE $noreg
    JMP_1 %bb.4

  ; CHECK-LABEL: bb.2:
  bb.2:
    $rbx = COPY $rdi
    CALL64pcrel32 @ext, csr_64, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !12
    $rdi = COPY $rbx
    $rbx = MOV64ri 0
    JMP_1 %bb.3

  ; CHECK-LABEL: bb.3:
  bb.3:
    ; rdi should have been preserved through parent bb.2, should have location
    DBG_INSTR_REF 1, 0, !11, !DIExpression(), debug-location !12
    ; CHECK:      DBG_INSTR_REF
    ; CHECK-NEXT: DBG_VALUE $rdi

  ; CHECK-LABEL: bb.4:
  bb.4:
    ; Merge here should fail
    DBG_INSTR_REF 1, 0, !11, !DIExpression(), debug-location !12
    ; CHECK:      DBG_INSTR_REF
    ; CHECK-NEXT: DBG_VALUE $noreg
    RETQ $rax, debug-location !12
...
